import Head from "next/head";
import { ChangeEvent, FormEvent, useState } from "react";

import {
  NavBar,
  FormInputText,
  PieChartStatuses,
  PieChartFormats,
  PieChartCountries,
  BarChartScores,
  statusesItem,
  formatsItem,
  countriesItem,
  scoresItem,
} from "@/components";

import { userQuery } from "@/utils";

import styles from "@/styles/User.module.css";

export default function User() {
  const [formInputTextValue, setFormInputTextValue] = useState<string>("");

  const [errorMessage, setErrorMessage] = useState<string>("");

  const [userName, setUserName] = useState<string>("");
  const [avatarUrl, setAvatarUrl] = useState<string>("");
  const [animeStatuses, setAnimeStatuses] = useState<statusesItem[]>([]);
  const [animeFormats, setAnimeFormats] = useState<formatsItem[]>([]);
  const [animeScores, setAnimeScores] = useState<scoresItem[]>([]);
  const [animeCountries, setAnimeCountries] = useState<countriesItem[]>([]);

  const fetchUser = async (name: string) => {
    setErrorMessage("");
    setUserName("");
    setAvatarUrl("");
    setAnimeStatuses([]);
    setAnimeFormats([]);
    setAnimeScores([]);

    const url: string = "https://graphql.anilist.co";

    const variables: { name: string } = {
      name: name,
    };

    interface options {
      method: string;
      headers: {
        "Content-Type": string;
        Accept: string;
      };
      body: string;
    }

    const options: options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: JSON.stringify({
        query: userQuery,
        variables: variables,
      }),
    };

    try {
      const response = await fetch(url, options);
      const data = await response.json();

      if (data.data.User !== null) {
        setAvatarUrl(data.data.User.avatar.large);
        setUserName(data.data.User.name);
        setAnimeStatuses(data.data.User.statistics.anime.statuses);
        setAnimeFormats(data.data.User.statistics.anime.formats);
        setAnimeCountries(data.data.User.statistics.anime.countries);
        setAnimeScores(data.data.User.statistics.anime.scores);
        console.log(data);
      } else {
        setErrorMessage(`There is no user named "${formInputTextValue}"`);
      }
    } catch (e) {
      console.log(e);
    }
  };

  const submitHandler = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    fetchUser(formInputTextValue);
  };

  const changeHandler = (event: ChangeEvent<HTMLInputElement>) => {
    setFormInputTextValue(event.target.value);
  };

  return (
    <>
      <Head>
        <title>Review Charter - User</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavBar />
      <main className={styles["user"]}>
        <FormInputText
          labelText="Enter username:"
          inputValue={formInputTextValue}
          submitHandler={submitHandler}
          changeHandler={changeHandler}
        />
        <p>{errorMessage}</p>
        {avatarUrl && (
          <img className={styles["user__avatar"]} src={avatarUrl} />
        )}
        <h1>{userName}</h1>
        {animeStatuses.length > 0 && (
          <>
            <h2>Statuses</h2>
            <PieChartStatuses statuses={animeStatuses} />
          </>
        )}
        {animeFormats.length > 0 && (
          <>
            <h2>Formats</h2>
            <PieChartFormats formats={animeFormats} />
          </>
        )}
        {animeCountries.length > 0 && (
          <>
            <h2>Countries</h2>
            <PieChartCountries countries={animeCountries} />
          </>
        )}
        {animeScores.length > 0 && (
          <>
            <h2>Scores</h2>
            <BarChartScores scores={animeScores} />
          </>
        )}
      </main>
    </>
  );
}
